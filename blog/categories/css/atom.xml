<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Css | 遗忘日记]]></title>
  <link href="http://niuniuzh.github.io/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://niuniuzh.github.io/"/>
  <updated>2018-04-17T18:07:19+08:00</updated>
  <id>http://niuniuzh.github.io/</id>
  <author>
    <name><![CDATA[niuniuzh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Transform实现环形路径平移]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/04/17/transformshi-xian-huan-xing-lu-jing-ping-yi/"/>
    <updated>2018-04-17T10:20:11+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/04/17/transformshi-xian-huan-xing-lu-jing-ping-yi</id>
    <content type="html"><![CDATA[<p>在上一篇中，介绍了css动画。这一篇介绍transform怎么实现环形平移。</p>

<p>旋转动画，用transform-origin定义圆心的位置，然后用rotate()进行旋转。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@keyframes spin {
</span><span class='line'>    0% {
</span><span class='line'>        transform: rotate(-90deg);
</span><span class='line'>    }
</span><span class='line'>    25% {
</span><span class='line'>        transform: rotate(0deg);
</span><span class='line'>    }
</span><span class='line'>    50% {
</span><span class='line'>        transform: rotate(90deg);
</span><span class='line'>    }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;75% {
</span><span class='line'>    transform: rotate(0deg);
</span><span class='line'>}
</span><span class='line'>100% {
</span><span class='line'>    transform: rotate(-90deg);
</span><span class='line'>} } .avatar{
</span><span class='line'>animation: spin 10s infinite linear;
</span><span class='line'>transform-origin: 50% 150px; } ```
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;style&gt;
</span><span class='line'>@keyframes spin {
</span><span class='line'>    0% {
</span><span class='line'>        transform: rotate(-90deg);
</span><span class='line'>    }
</span><span class='line'>    25% {
</span><span class='line'>        transform: rotate(0deg);
</span><span class='line'>    }
</span><span class='line'>    50% {
</span><span class='line'>        transform: rotate(90deg);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    75% {
</span><span class='line'>        transform: rotate(0deg);
</span><span class='line'>    }
</span><span class='line'>    100% {
</span><span class='line'>        transform: rotate(-90deg);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>@keyframes spin-reverse {
</span><span class='line'>    0% {
</span><span class='line'>        transform: rotate(90deg);
</span><span class='line'>    }
</span><span class='line'>    25% {
</span><span class='line'>        transform: rotate(0deg);
</span><span class='line'>    }
</span><span class='line'>    50% {
</span><span class='line'>        transform: rotate(-90deg);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    75% {
</span><span class='line'>        transform: rotate(0deg);
</span><span class='line'>    }
</span><span class='line'>    100% {
</span><span class='line'>        transform: rotate(90deg);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>.d-div{
</span><span class='line'>    animation: spin-reverse 10s infinite linear;
</span><span class='line'>}
</span><span class='line'>.avatar{
</span><span class='line'>    animation: spin 10s infinite linear;
</span><span class='line'>    transform-origin: 50% 150px;
</span><span class='line'>}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>
</span><span class='line'>&lt;div style="height:150px;border:solid 1px #888;position:relative;width:100%;"&gt;
</span><span class='line'>    &lt;svg version="1.1" xmlns="http://www.w3.org/2000/svg" style="position:absolute;width:100%;"&gt;
</span><span class='line'>         &lt;circle cx="50%" cy="150" r="100" stroke="green" fill="transparent" stroke-width="2"&gt;&lt;/circle&gt;
</span><span class='line'>    &lt;/svg&gt;
</span><span class='line'>    &lt;img src="http://niuniuzh.github.io/images/github.png" class="avatar" style="width:100px;height:100px;border-radius: 50%; margin: 0 auto; display: block;" /&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这是一个旋转动画，元素在沿着环形路径移动的同时，自身也会围绕圆心发生旋转。这并不是我们想要的平移效果。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;利用多元素的变形相消&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;假如有一个应用了旋转变换函数的元素是：</span></code></pre></td></tr></table></div></figure></p>
<div style="transform:rotate(45deg) rotate(-45deg)"></div>
<p><code>
这个元素其实是没有旋转的，因为两个旋转变换函数刚好抵消。它等同于：
</code></p>
<div style="transform:rotate(45deg)">
    <div style="transform:rotate(-45deg)"></div>
</div>
<p>```</p>

<div style="height:150px;border:solid 1px #888;position:relative;width:100%;">
    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" style="position:absolute;width:100%;">
         <circle cx="50%" cy="150" r="100" stroke="green" fill="transparent" stroke-width="2"></circle>
    </svg>
    <div class="avatar">
      <img src="http://niuniuzh.github.io/images/github.png" class="d-div" style="width:100px;height:100px;border-radius: 50%; margin: 0 auto; display: block;" />
    </div>
</div>

<p>只使用单个元素</p>

<p>一个元素的多个变换函数可以分散给多层元素。反过来，多层元素的变换函数，也可以集中到单个元素。
这个思路是可行的，只不过，有一个必须解决的问题，就是transform-origin。</p>

<ul>
  <li>
    <p>从一个单位矩阵（identity matrix）开始</p>
  </li>
  <li>
    <p>根据transform-origin的x、y、z坐标值，进行平移（translate）</p>
  </li>
  <li>
    <p>从左向右依次对transform里的变换函数执行乘法</p>
  </li>
  <li>
    <p>根据transform-origin的x、y、z坐标值，进行反向平移</p>
  </li>
</ul>

<p>transform-origin在这里被表述为两次方向相反的平移，也就是说，transform-origin并不是什么特别的东西，它可以被translate()替代。</p>

<p>举个栗子
<code>
.avatar{
    transform: rotate(30deg);
    transform-origin: 200px 300px;
}
</code>
等效于
<code>
.avatar{
    transform: translate(200px, 300px) rotate(30deg) translate(-200px, -300px);
    transform-origin: 0 0;
}
</code></p>

<p>利用前面的原理，我们把前面两个元素的transform-origin的差异抹去（全部变为transform-origin: 0 0;的等效），转移到transform上：</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Transition介绍]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/02/15/css-transitionjie-shao/"/>
    <updated>2018-02-15T13:48:20+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/02/15/css-transitionjie-shao</id>
    <content type="html"><![CDATA[<p>CSS3 transition属性,其实就是动画。平滑的改变CSS的值。
大部分属性都可以使用CSS transition，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties">Animatable CSS properties</a></p>

<!-- more -->

<p>transition CSS 属性是一个简写属性，用于 transition-property, transition-duration, transition-timing-function, 和 transition-delay。</p>

<p>transition-property:指定过渡的属性值，多个属性值可以逗号隔开。
<code>
transition-property: width, height, background-color, transform;
</code></p>

<p>transition-duration:指定这个过渡的持续时间,如果两个数量不匹配，就截取少的那一个。
<code>
transition-property: width, height, background-color, transform;
tansition-duration: 2s, 1s, 3s, 5s;
</code></p>

<p>transition-delay:延迟过渡时间,属性改变到变换开始之间的间隔时间
<code>
transition-delay: 5s
</code></p>

<p>transition-timing-function:指定过渡动画缓动类型，有ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(),函数改变的变换过程，不会改变结果。
<code>
transition-timing-function: ease;
transition-timing-function: linear;
</code></p>

<p>更多讯息<a href="https://www.w3.org/TR/css-transitions-1/">CSS Transtions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习CSS Transform]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/02/11/xue-xi-css-transform/"/>
    <updated>2018-02-11T00:30:09+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/02/11/xue-xi-css-transform</id>
    <content type="html"><![CDATA[<p>Transform变换，是css动画里扮演一重要角色。Transform只对block元素有效。使用它，元素可以translate,rotate,scale,skew。</p>

<p><code>
img0{width:100px;border-color:red;}
img1{width:100px;border-color:yellow;transform:rotate(20deg);}
img2{width:100px;border-color:green;transform:translate(20px,20px);}
img3{width:100px;border-color:blue;transform:scale(1.2,0.8);}
img4{width:100px;border-color:rebeccapurple;transform:skew(20deg,30deg);}
</code></p>
<div style="display:flex;justify-content: space-around;padding-bottom:30px;">
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:red;" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:yellow;transform:rotate(20deg);" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:green;transform:translate(20px, 20px);" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:blue;transform:scale(1.2,0.8)" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:rebeccapurple;transform:skew(20deg,30deg)" />
</div>

<!-- more -->

<p>第一个图片没有任何改变，原本的样式。第二个图片加上一个rotate旋转，从原点(由 transform-origin 属性指定)开始安装顺时针方向旋转元素一个特定的角度。
第三个图片加上一个translate平移，在x方向和y方向移动指定的距离。第四个图片加上一个缩放scale,在x方向和y方向放大缩小指定倍数。第四个图片加上一个skew
倾斜，与x轴或者y轴转动设置的角度。</p>
]]></content>
  </entry>
  
</feed>
