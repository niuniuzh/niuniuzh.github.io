<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webpack | 遗忘日记]]></title>
  <link href="http://niuniuzh.github.io/blog/categories/webpack/atom.xml" rel="self"/>
  <link href="http://niuniuzh.github.io/"/>
  <updated>2018-05-29T22:15:49+08:00</updated>
  <id>http://niuniuzh.github.io/</id>
  <author>
    <name><![CDATA[niuniuzh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Html-loader 和 Html-webpack-plugin 冲突]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/05/29/html-loader-he-html-webpack-plugin-chong-tu/"/>
    <updated>2018-05-29T21:51:11+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/05/29/html-loader-he-html-webpack-plugin-chong-tu</id>
    <content type="html"><![CDATA[<p>今天在学习webpack的时候，使用html-webpack-plugin的模板，生成的html始终不能解析。
不知道是什么问题，之前还是可以解析的。</p>

<p>后来发现删除掉html-loader以后，可以正常解析了。上网查了一下，这个问题还真不少。
html-webpack-plugin解析模板时使用的是lodash来解析，而配置了html-loader后，
则对html页面会使用html-loader来解析模板文件，因此会导致模板没有解析。</p>

<!--more-->

<p>方法1：亲测,添加exclude排除index.html模板</p>

<p><code>
var htmlWebpackPlugin = require('html-webpack-plugin');
var path = require('path');
module.exports = {
    module: {
        rules: [
            {
                test: /\.html$/,
                exclude: path.resolve(__dirname,'index.html'),
                use: {
                    loader: 'html-loader',
                }
            }
        ]
    },
    plugins: [
        new htmlWebpackPlugin({
            filename: 'index.html',
            template: 'index.html',
            inject: 'body',
            title: 'web app test'
        })
    ]
};
</code></p>

<p>方法2：去掉webpack.config.js文件中配置的全局html-loader</p>

<p>这样html模版文件就不会被html-loader解析，我们可以使用ejs语法嵌入其他html页面和图片资源。因为没了全局的html-loader解析html文件，使用ejs语法嵌入的资源返回的是ejs代码，还需要使用html-loader来解析成html代码。</p>

<p>（html-loader!）表示引用html-loader这个加载器来解析</p>

<p>&lt;%= require(‘html-loader!../layout/left.html’) %&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webpack Loader]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/05/29/webpack-loader/"/>
    <updated>2018-05-29T09:09:52+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/05/29/webpack-loader</id>
    <content type="html"><![CDATA[<h2 id="loaders">loaders</h2>
<p>webpack 可以使用 loader 来预处理文件。这允许你打包除 JavaScript 之外的任何静态资源。</p>

<p>loader 通过在 require() 语句中使用 loadername! 前缀来激活，或者通过 webpack 配置中的正则表达式来自动应用。</p>

<!--more-->

<p>使用实例：
<code>
module.exports = {
  module: {
    rules: [
      { test: /\.css$/, use: 'css-loader' },
      { test: /\.ts$/, use: 'ts-loader' }，
      exclude: /(node_modules|bower_components)/,
      include: /(src)/
    ]
  }
};
</code></p>

<p>{ test: Condition }：匹配特定条件。一般是提供一个正则表达式或正则表达式的数组，但这不是强制的。</p>

<p>{ include: Condition }：匹配特定条件。一般是提供一个字符串或者字符串数组，但这不是强制的。</p>

<p>{ exclude: Condition }：排除特定条件。一般是提供一个字符串或字符串数组，但这不是强制的。</p>

<p>{ and: [Condition] }：必须匹配数组中的所有条件</p>

<p>{ or: [Condition] }：匹配数组中任何一个条件</p>

<p>{ not: [Condition] }：必须排除这个条件</p>

<p>参考<a href="https://webpack.docschina.org/loaders/" title="loaders">webpack loaders 文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webpack Install]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/05/15/webpack-install/"/>
    <updated>2018-05-15T20:32:33+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/05/15/webpack-install</id>
    <content type="html"><![CDATA[<p>webpack是js项目的一个打包工具，可以分割代码，按需加载，提高启动速度。</p>

<p>webpack产生背景：</p>

<ul>
  <li>多js文件下全局对象的冲突；</li>
  <li>模块的加载顺序问题；</li>
  <li>解决模块或者库的依赖问题；</li>
  <li>模块过多难以管理；</li>
</ul>

<!--more-->

<p>webpack的作用：</p>

<ul>
  <li>将所有的依赖拆分成块且按需加载</li>
  <li>首屏加载耗时少</li>
  <li>所有的静态文件都是一个模块（css和图片等静态文件）</li>
  <li>第三方库也可以作为一个模块被加载</li>
  <li>自定义程度高，你可以按需自定义打包的整个流程</li>
  <li>适用于大project的开发场景</li>
</ul>

<h2 id="section">安装</h2>

<p>webpack使用npm安装，
<code>
npm install -g webpack
npm install webpack --save-dev
</code></p>

<h2 id="section-1">配置</h2>

<p>webpack默认使用当前目录下的webpack.config.js,也可以通过命令指定自定义配置文件。
<code>
webpack --config webpack.my.config.js
webpack --config webpack.config.js
</code></p>

<h2 id="section-2">配置简介</h2>

<p>webpack配置文件大致上分几个部分，entry,output,loaders,plugins,mode。</p>

<h3 id="entry">entry</h3>
<p>entry用来指定打包的入口，可以有多个入口。
<code>
module.exports = {
    entry:'./index.js'
    output:{
        filename:'bundle.js',
        path:__dirname
        }
}
</code>
### output
output用来指定打包后文件名字和保存的位置，也可以有多个。
<code>
module.exports = {
    entry:['./index.js','./a.js']
    output:{
        filename:'[name].js',
        path:__dirname
        }
}
</code></p>

<h3 id="loaders">loaders</h3>
<p>loaders可以将任意类型的模块转换为js代码的模块，然后在打包，拆分，加载。
比较常用的有css-loader,style-loader.使用之前要先安装，
npm install –save-dev css-loader style-loader.
test:正则表达式，loaders加载解析要用的loaders.
<code>
module.exports = {
    entry:['./index.js','./a.js']
    output:{
        filename:'[name].js',
        path:__dirname
        },
    module:{
        loaders:{
            test:/\.css$/,
            loaders:['style','css']
        }
    }
}
</code></p>

<h3 id="plugins">plugins</h3>
<p>plugins可以满足，loaders不可以实现的功能，或者不合适在loaders中实现。
plugins的配置超级简单，在plugins数组中引入要使用的插件，加上配置就ok了。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const HtmlWebpackPlugin = require(‘html-webpack-plugin’); //installed via npm
</span><span class='line'>const webpack = require(‘webpack’); //to access built-in plugins&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;const config = {
</span><span class='line'>  module: {
</span><span class='line'>    rules: [
</span><span class='line'>      { test: /.txt$/, use: ‘raw-loader’ }
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  plugins: [
</span><span class='line'>    new HtmlWebpackPlugin({template: ‘./src/index.html’})
</span><span class='line'>  ]
</span><span class='line'>};&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;module.exports = config;</span></code></pre></td></tr></table></div></figure></p>

<h3 id="mode">mode</h3>
<p>mode有三种模式可以设置，development,production,none.默认设置是production.
<code>
module.exports = {
  mode: 'production'
};
</code>
参看<a href="https://webpack.docschina.org/concepts" title="webpack">webpack中文文档</a></p>
]]></content>
  </entry>
  
</feed>
