<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 遗忘日记]]></title>
  <link href="http://niuniuzh.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://niuniuzh.github.io/"/>
  <updated>2018-04-17T09:46:11+08:00</updated>
  <id>http://niuniuzh.github.io/</id>
  <author>
    <name><![CDATA[niuniuzh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript单例模式]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/02/11/javascriptdan-li-mo-shi/"/>
    <updated>2018-02-11T22:55:01+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/02/11/javascriptdan-li-mo-shi</id>
    <content type="html"><![CDATA[<p>单例模式顾名思义，就是只有一个实例。是最简单的一种设计模式，在开发当中经常会使用到。今天简单梳理一下。</p>

<p>单例模式的优点有
<code>
可以全局访问
避免共享资源多重占用
内存中只有一个实例，节约内存空间
避免频繁创建销毁，提高性能
</code></p>

<p>单例模式实现方式</p>

<p>1.使用闭包
<code>js
var Singleton = (()=&gt;{
  var instance;
  var _this = this;
  return {
      getInstance: function(){
          if(typeof instance !== "object"){
              instance = _this;
          }
          return instance;
      }
  }
})()
</code></p>

<!-- more -->

<p>2.通用的惰性单例模式
```js
var Dog = function(){
}
var SingleDog = ((fn)=&gt;{
var instance;
return function(){
  return instance || (instance = fn.apply(this, arguments));
}
})();</p>

<p>var dog1 = SingleDog(Dog);
var dog2 = SingleDog(Dog);
console.log(dog1===dog2);
```</p>

<p>3.使用全局变量
<code>js
var instance;
function SingleDog(){
    if(typeof instance === 'object'){
        return instance;
    }
    instance = this;
}
var dog1 = new SingleDog();
var dog2 = new SingleDog();
console.log(dog1 === dog2);
</code></p>
]]></content>
  </entry>
  
</feed>
