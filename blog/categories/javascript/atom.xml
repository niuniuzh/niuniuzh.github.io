<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 遗忘日记]]></title>
  <link href="http://niuniuzh.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://niuniuzh.github.io/"/>
  <updated>2018-05-15T22:37:59+08:00</updated>
  <id>http://niuniuzh.github.io/</id>
  <author>
    <name><![CDATA[niuniuzh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript单例模式]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/02/11/javascriptdan-li-mo-shi/"/>
    <updated>2018-02-11T22:55:01+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/02/11/javascriptdan-li-mo-shi</id>
    <content type="html"><![CDATA[<p>单例模式顾名思义，就是只有一个实例。是最简单的一种设计模式，在开发当中经常会使用到。今天简单梳理一下。</p>

<p>单例模式的优点有
<code>
可以全局访问
避免共享资源多重占用
内存中只有一个实例，节约内存空间
避免频繁创建销毁，提高性能
</code></p>

<p>单例模式实现方式</p>

<p>1.使用闭包
<code>js
var Singleton = (()=&gt;{
  var instance;
  var _this = this;
  return {
      getInstance: function(){
          if(typeof instance !== "object"){
              instance = _this;
          }
          return instance;
      }
  }
})()
</code></p>

<!-- more -->

<p>2.通用的惰性单例模式
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Dog</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SingleDog</span> <span class="o">=</span> <span class="p">((</span><span class="nx">fn</span><span class="p">)</span><span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">instance</span> <span class="o">||</span> <span class="p">(</span><span class="nx">instance</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">})();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">dog1</span> <span class="o">=</span> <span class="nx">SingleDog</span><span class="p">(</span><span class="nx">Dog</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dog2</span> <span class="o">=</span> <span class="nx">SingleDog</span><span class="p">(</span><span class="nx">Dog</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog1</span><span class="o">===</span><span class="nx">dog2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>3.使用全局变量
<code>js
var instance;
function SingleDog(){
    if(typeof instance === 'object'){
        return instance;
    }
    instance = this;
}
var dog1 = new SingleDog();
var dog2 = new SingleDog();
console.log(dog1 === dog2);
</code></p>
]]></content>
  </entry>
  
</feed>
