<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[遗忘日记]]></title>
  <link href="http://niuniuzh.github.io/atom.xml" rel="self"/>
  <link href="http://niuniuzh.github.io/"/>
  <updated>2018-05-29T22:15:49+08:00</updated>
  <id>http://niuniuzh.github.io/</id>
  <author>
    <name><![CDATA[niuniuzh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Html-loader 和 Html-webpack-plugin 冲突]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/05/29/html-loader-he-html-webpack-plugin-chong-tu/"/>
    <updated>2018-05-29T21:51:11+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/05/29/html-loader-he-html-webpack-plugin-chong-tu</id>
    <content type="html"><![CDATA[<p>今天在学习webpack的时候，使用html-webpack-plugin的模板，生成的html始终不能解析。
不知道是什么问题，之前还是可以解析的。</p>

<p>后来发现删除掉html-loader以后，可以正常解析了。上网查了一下，这个问题还真不少。
html-webpack-plugin解析模板时使用的是lodash来解析，而配置了html-loader后，
则对html页面会使用html-loader来解析模板文件，因此会导致模板没有解析。</p>

<!--more-->

<p>方法1：亲测,添加exclude排除index.html模板</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var htmlWebpackPlugin = require('html-webpack-plugin');
</span><span class="line">var path = require('path');
</span><span class="line">module.exports = {
</span><span class="line">    module: {
</span><span class="line">        rules: [
</span><span class="line">            {
</span><span class="line">                test: /\.html$/,
</span><span class="line">                exclude: path.resolve(__dirname,'index.html'),
</span><span class="line">                use: {
</span><span class="line">                    loader: 'html-loader',
</span><span class="line">                }
</span><span class="line">            }
</span><span class="line">        ]
</span><span class="line">    },
</span><span class="line">    plugins: [
</span><span class="line">        new htmlWebpackPlugin({
</span><span class="line">            filename: 'index.html',
</span><span class="line">            template: 'index.html',
</span><span class="line">            inject: 'body',
</span><span class="line">            title: 'web app test'
</span><span class="line">        })
</span><span class="line">    ]
</span><span class="line">};</span></code></pre></td></tr></table></div></figure>

<p>方法2：去掉webpack.config.js文件中配置的全局html-loader</p>

<p>这样html模版文件就不会被html-loader解析，我们可以使用ejs语法嵌入其他html页面和图片资源。因为没了全局的html-loader解析html文件，使用ejs语法嵌入的资源返回的是ejs代码，还需要使用html-loader来解析成html代码。</p>

<p>（html-loader!）表示引用html-loader这个加载器来解析</p>

<p>&lt;%= require(‘html-loader!../layout/left.html’) %&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webpack Loader]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/05/29/webpack-loader/"/>
    <updated>2018-05-29T09:09:52+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/05/29/webpack-loader</id>
    <content type="html"><![CDATA[<h2 id="loaders">loaders</h2>
<p>webpack 可以使用 loader 来预处理文件。这允许你打包除 JavaScript 之外的任何静态资源。</p>

<p>loader 通过在 require() 语句中使用 loadername! 前缀来激活，或者通过 webpack 配置中的正则表达式来自动应用。</p>

<!--more-->

<p>使用实例：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module.exports = {
</span><span class="line">  module: {
</span><span class="line">    rules: [
</span><span class="line">      { test: /\.css$/, use: 'css-loader' },
</span><span class="line">      { test: /\.ts$/, use: 'ts-loader' }，
</span><span class="line">      exclude: /(node_modules|bower_components)/,
</span><span class="line">      include: /(src)/
</span><span class="line">    ]
</span><span class="line">  }
</span><span class="line">};</span></code></pre></td></tr></table></div></figure>

<p>{ test: Condition }：匹配特定条件。一般是提供一个正则表达式或正则表达式的数组，但这不是强制的。</p>

<p>{ include: Condition }：匹配特定条件。一般是提供一个字符串或者字符串数组，但这不是强制的。</p>

<p>{ exclude: Condition }：排除特定条件。一般是提供一个字符串或字符串数组，但这不是强制的。</p>

<p>{ and: [Condition] }：必须匹配数组中的所有条件</p>

<p>{ or: [Condition] }：匹配数组中任何一个条件</p>

<p>{ not: [Condition] }：必须排除这个条件</p>

<p>参考<a href="https://webpack.docschina.org/loaders/" title="loaders">webpack loaders 文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webpack Install]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/05/15/webpack-install/"/>
    <updated>2018-05-15T20:32:33+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/05/15/webpack-install</id>
    <content type="html"><![CDATA[<p>webpack是js项目的一个打包工具，可以分割代码，按需加载，提高启动速度。</p>

<p>webpack产生背景：</p>

<ul>
  <li>多js文件下全局对象的冲突；</li>
  <li>模块的加载顺序问题；</li>
  <li>解决模块或者库的依赖问题；</li>
  <li>模块过多难以管理；</li>
</ul>

<!--more-->

<p>webpack的作用：</p>

<ul>
  <li>将所有的依赖拆分成块且按需加载</li>
  <li>首屏加载耗时少</li>
  <li>所有的静态文件都是一个模块（css和图片等静态文件）</li>
  <li>第三方库也可以作为一个模块被加载</li>
  <li>自定义程度高，你可以按需自定义打包的整个流程</li>
  <li>适用于大project的开发场景</li>
</ul>

<h2 id="section">安装</h2>

<p>webpack使用npm安装，</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">npm install -g webpack
</span><span class="line">npm install webpack --save-dev</span></code></pre></td></tr></table></div></figure>

<h2 id="section-1">配置</h2>

<p>webpack默认使用当前目录下的webpack.config.js,也可以通过命令指定自定义配置文件。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">webpack --config webpack.my.config.js
</span><span class="line">webpack --config webpack.config.js</span></code></pre></td></tr></table></div></figure>

<h2 id="section-2">配置简介</h2>

<p>webpack配置文件大致上分几个部分，entry,output,loaders,plugins,mode。</p>

<h3 id="entry">entry</h3>
<p>entry用来指定打包的入口，可以有多个入口。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module.exports = {
</span><span class="line">    entry:'./index.js'
</span><span class="line">    output:{
</span><span class="line">        filename:'bundle.js',
</span><span class="line">        path:__dirname
</span><span class="line">        }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>
<p>### output
output用来指定打包后文件名字和保存的位置，也可以有多个。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module.exports = {
</span><span class="line">    entry:['./index.js','./a.js']
</span><span class="line">    output:{
</span><span class="line">        filename:'[name].js',
</span><span class="line">        path:__dirname
</span><span class="line">        }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<h3 id="loaders">loaders</h3>
<p>loaders可以将任意类型的模块转换为js代码的模块，然后在打包，拆分，加载。
比较常用的有css-loader,style-loader.使用之前要先安装，
npm install –save-dev css-loader style-loader.
test:正则表达式，loaders加载解析要用的loaders.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module.exports = {
</span><span class="line">    entry:['./index.js','./a.js']
</span><span class="line">    output:{
</span><span class="line">        filename:'[name].js',
</span><span class="line">        path:__dirname
</span><span class="line">        },
</span><span class="line">    module:{
</span><span class="line">        loaders:{
</span><span class="line">            test:/\.css$/,
</span><span class="line">            loaders:['style','css']
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<h3 id="plugins">plugins</h3>
<p>plugins可以满足，loaders不可以实现的功能，或者不合适在loaders中实现。
plugins的配置超级简单，在plugins数组中引入要使用的插件，加上配置就ok了。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm
</span><span class="line">const webpack = require('webpack'); //to access built-in plugins
</span><span class="line">
</span><span class="line">const config = {
</span><span class="line">  module: {
</span><span class="line">    rules: [
</span><span class="line">      { test: /\.txt$/, use: 'raw-loader' }
</span><span class="line">    ]
</span><span class="line">  },
</span><span class="line">  plugins: [
</span><span class="line">    new HtmlWebpackPlugin({template: './src/index.html'})
</span><span class="line">  ]
</span><span class="line">};
</span><span class="line">
</span><span class="line">module.exports = config;</span></code></pre></td></tr></table></div></figure>

<h3 id="mode">mode</h3>
<p>mode有三种模式可以设置，development,production,none.默认设置是production.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module.exports = {
</span><span class="line">  mode: 'production'
</span><span class="line">};</span></code></pre></td></tr></table></div></figure>
<p>参看<a href="https://webpack.docschina.org/concepts" title="webpack">webpack中文文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transform实现环形路径平移]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/04/17/transformshi-xian-huan-xing-lu-jing-ping-yi/"/>
    <updated>2018-04-17T10:20:11+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/04/17/transformshi-xian-huan-xing-lu-jing-ping-yi</id>
    <content type="html"><![CDATA[<p>在上一篇中，介绍了css动画。这一篇介绍transform怎么实现环形平移。</p>

<p>旋转动画，用transform-origin定义圆心的位置，然后用rotate()进行旋转。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@keyframes spin {
</span><span class="line">    0% {
</span><span class="line">        transform: rotate(-90deg);
</span><span class="line">    }
</span><span class="line">    25% {
</span><span class="line">        transform: rotate(0deg);
</span><span class="line">    }
</span><span class="line">    50% {
</span><span class="line">        transform: rotate(90deg);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    75% {
</span><span class="line">        transform: rotate(0deg);
</span><span class="line">    }
</span><span class="line">    100% {
</span><span class="line">        transform: rotate(-90deg);
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">.avatar{
</span><span class="line">    animation: spin 10s infinite linear;
</span><span class="line">    transform-origin: 50% 150px;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>
<!--more-->

<style>
@keyframes spin {
    0% {
        transform: rotate(-90deg);
    }
    25% {
        transform: rotate(0deg);
    }
    50% {
        transform: rotate(90deg);
    }

    75% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-90deg);
    }
}
@keyframes spin-reverse {
    0% {
        transform: rotate(90deg);
    }
    25% {
        transform: rotate(0deg);
    }
    50% {
        transform: rotate(-90deg);
    }

    75% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(90deg);
    }
}
.d-div{
    animation: spin-reverse 10s infinite linear;
}
.avatar{
    animation: spin 10s infinite linear;
    transform-origin: 50% 150px;
}

@keyframes single-spin {
    0% {
        transform: translateY(-50%) translateY(150px) rotate(-90deg) translateY(-150px) translateY(50%)
        rotate(90deg);
    }
    25% {
        transform: translateY(-50%) translateY(150px) rotate(0deg) translateY(-150px) translateY(50%)
        rotate(0deg);
    }
    50% {
        transform: translateY(-50%) translateY(150px) rotate(90deg) translateY(-150px) translateY(50%)
        rotate(-90deg);
    }

    75% {
        transform: translateY(-50%) translateY(150px) rotate(0deg) translateY(-150px) translateY(50%)
        rotate(0deg);
    }
    100% {
        transform: translateY(-50%) translateY(150px) rotate(-90deg) translateY(-150px) translateY(50%)
        rotate(90deg);
    }
}
.single-avatar {
    animation: single-spin 10s infinite linear;
}

</style>

<div style="height:150px;border:solid 1px #888;position:relative;width:100%;">
    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" style="position:absolute;width:100%;">
         <circle cx="50%" cy="150" r="100" stroke="green" fill="transparent" stroke-width="2"></circle>
    </svg>
    <img src="http://niuniuzh.github.io/images/github.png" class="avatar" style="width:100px;height:100px;border-radius: 50%; margin: 0 auto; display: block;" />
</div>

<p>这是一个旋转动画，元素在沿着环形路径移动的同时，自身也会围绕圆心发生旋转。这并不是我们想要的平移效果。</p>

<p>利用多元素的变形相消</p>

<p>假如有一个应用了旋转变换函数的元素是：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;div style="transform:rotate(45deg) rotate(-45deg)"&gt;&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>
<p>这个元素其实是没有旋转的，因为两个旋转变换函数刚好抵消。它等同于：</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;div style="transform:rotate(45deg)"&gt;
</span><span class="line">    &lt;div style="transform:rotate(-45deg)"&gt;&lt;/div&gt;
</span><span class="line">&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>

<div style="height:150px;border:solid 1px #888;position:relative;width:100%;">
    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" style="position:absolute;width:100%;">
         <circle cx="50%" cy="150" r="100" stroke="green" fill="transparent" stroke-width="2"></circle>
    </svg>
    <div class="avatar">
      <img src="http://niuniuzh.github.io/images/github.png" class="d-div" style="width:100px;height:100px;border-radius: 50%; margin: 0 auto; display: block;" />
    </div>
</div>

<p>只使用单个元素</p>

<p>一个元素的多个变换函数可以分散给多层元素。反过来，多层元素的变换函数，也可以集中到单个元素。
这个思路是可行的，只不过，有一个必须解决的问题，就是transform-origin。</p>

<ul>
  <li>
    <p>从一个单位矩阵（identity matrix）开始</p>
  </li>
  <li>
    <p>根据transform-origin的x、y、z坐标值，进行平移（translate）</p>
  </li>
  <li>
    <p>从左向右依次对transform里的变换函数执行乘法</p>
  </li>
  <li>
    <p>根据transform-origin的x、y、z坐标值，进行反向平移</p>
  </li>
</ul>

<p>transform-origin在这里被表述为两次方向相反的平移，也就是说，transform-origin并不是什么特别的东西，它可以被translate()替代。</p>

<p>举个栗子</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">.avatar{
</span><span class="line">    transform: rotate(30deg);
</span><span class="line">    transform-origin: 200px 300px;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>
<p>等效于</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">.avatar{
</span><span class="line">    transform: translate(200px, 300px) rotate(30deg) translate(-200px, -300px);
</span><span class="line">    transform-origin: 0 0;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>

<p>利用前面的原理，我们把前面两个元素的transform-origin的差异抹去（全部变为transform-origin: 0 0;的等效），转移到transform上：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@keyframes spin{
</span><span class="line">    0% {
</span><span class="line">        transform: translate(50%,150px) rotate(-90deg) translate(-50%,-150px);
</span><span class="line">    }
</span><span class="line">    25% {
</span><span class="line">        transform: translate(50%,150px) rotate(0deg) translate(-50%,-150px);
</span><span class="line">    }
</span><span class="line">    50% {
</span><span class="line">        transform: translate(50%,150px) rotate(90deg) translate(-50%,-150px);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    75% {
</span><span class="line">        transform: translate(50%,150px) rotate(0deg) translate(-50%,-150px);
</span><span class="line">    }
</span><span class="line">    100% {
</span><span class="line">        transform: translate(50%,150px) rotate(-90deg) translate(-50%,-150px);
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">@keyframes spin-reverse {
</span><span class="line">    0% {
</span><span class="line">        transform: translate(50%,50%) rotate(90deg) translate(-50%,-50%);
</span><span class="line">    }
</span><span class="line">    25% {
</span><span class="line">        transform: translate(50%,50%) rotate(0deg) translate(-50%,-50%);
</span><span class="line">    }
</span><span class="line">    50% {
</span><span class="line">        transform: translate(50%,50%) rotate(-90deg) translate(-50%,-50%);
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    75% {
</span><span class="line">        transform: translate(50%,50%) rotate(0deg) translate(-50%,-50%);
</span><span class="line">    }
</span><span class="line">    100% {
</span><span class="line">        transform: translate(50%,50%) rotate(90deg) translate(-50%,-50%);
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">.avatar {
</span><span class="line">    animation: spin 10s infinite linear;
</span><span class="line">}
</span><span class="line">.avatar &gt; img {
</span><span class="line">    animation: spin-reverse 10s infinite linear;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure>
<p>现在这段代码中，两个元素的transform-origin已经一致了，然后我们根据变换函数合并规则，将它们集中到一个元素上，
此时html重新变为单个元素：</p>

<div style="height:150px;border:solid 1px #888;position:relative;width:100%;">
    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" style="position:absolute;width:100%;">
         <circle cx="50%" cy="150" r="100" stroke="green" fill="transparent" stroke-width="2"></circle>
    </svg>
    <img src="http://niuniuzh.github.io/images/github.png" class="single-avatar" style="width:100px;height:100px;border-radius: 50%; margin: 0 auto; display: block;" />
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Transition介绍]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/02/15/css-transitionjie-shao/"/>
    <updated>2018-02-15T13:48:20+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/02/15/css-transitionjie-shao</id>
    <content type="html"><![CDATA[<p>CSS3 transition属性,其实就是动画。平滑的改变CSS的值。
大部分属性都可以使用CSS transition，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties">Animatable CSS properties</a></p>

<!-- more -->

<p>transition CSS 属性是一个简写属性，用于 transition-property, transition-duration, transition-timing-function, 和 transition-delay。</p>

<p>transition-property:指定过渡的属性值，多个属性值可以逗号隔开。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">transition-property: width, height, background-color, transform;</span></code></pre></td></tr></table></div></figure>

<p>transition-duration:指定这个过渡的持续时间,如果两个数量不匹配，就截取少的那一个。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">transition-property: width, height, background-color, transform;
</span><span class="line">tansition-duration: 2s, 1s, 3s, 5s;</span></code></pre></td></tr></table></div></figure>

<p>transition-delay:延迟过渡时间,属性改变到变换开始之间的间隔时间</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">transition-delay: 5s</span></code></pre></td></tr></table></div></figure>

<p>transition-timing-function:指定过渡动画缓动类型，有ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(),函数改变的变换过程，不会改变结果。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">transition-timing-function: ease;
</span><span class="line">transition-timing-function: linear;</span></code></pre></td></tr></table></div></figure>

<p>更多讯息<a href="https://www.w3.org/TR/css-transitions-1/">CSS Transtions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript单例模式]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/02/11/javascriptdan-li-mo-shi/"/>
    <updated>2018-02-11T22:55:01+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/02/11/javascriptdan-li-mo-shi</id>
    <content type="html"><![CDATA[<p>单例模式顾名思义，就是只有一个实例。是最简单的一种设计模式，在开发当中经常会使用到。今天简单梳理一下。</p>

<p>单例模式的优点有</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">可以全局访问
</span><span class="line">避免共享资源多重占用
</span><span class="line">内存中只有一个实例，节约内存空间
</span><span class="line">避免频繁创建销毁，提高性能</span></code></pre></td></tr></table></div></figure>

<p>单例模式实现方式</p>

<p>1.使用闭包</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">Singleton</span> <span class="o">=</span> <span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="k">return</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">getInstance</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">          <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">instance</span> <span class="o">!==</span> <span class="s2">&quot;object&quot;</span><span class="p">){</span>
</span><span class="line">              <span class="nx">instance</span> <span class="o">=</span> <span class="nx">_this</span><span class="p">;</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">          <span class="k">return</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">})()</span>
</span></code></pre></td></tr></table></div></figure>

<!-- more -->

<p>2.通用的惰性单例模式</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">Dog</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">SingleDog</span> <span class="o">=</span> <span class="p">((</span><span class="nx">fn</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class="line"><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">instance</span> <span class="o">||</span> <span class="p">(</span><span class="nx">instance</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="p">})();</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">dog1</span> <span class="o">=</span> <span class="nx">SingleDog</span><span class="p">(</span><span class="nx">Dog</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">dog2</span> <span class="o">=</span> <span class="nx">SingleDog</span><span class="p">(</span><span class="nx">Dog</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog1</span><span class="o">===</span><span class="nx">dog2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>3.使用全局变量</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">SingleDog</span><span class="p">(){</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">instance</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">instance</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">instance</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">dog1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SingleDog</span><span class="p">();</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">dog2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SingleDog</span><span class="p">();</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog1</span> <span class="o">===</span> <span class="nx">dog2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习CSS Transform]]></title>
    <link href="http://niuniuzh.github.io/blog/2018/02/11/xue-xi-css-transform/"/>
    <updated>2018-02-11T00:30:09+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2018/02/11/xue-xi-css-transform</id>
    <content type="html"><![CDATA[<p>Transform变换，是css动画里扮演一重要角色。Transform只对block元素有效。使用它，元素可以translate,rotate,scale,skew。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">img0{width:100px;border-color:red;}
</span><span class="line">img1{width:100px;border-color:yellow;transform:rotate(20deg);}
</span><span class="line">img2{width:100px;border-color:green;transform:translate(20px,20px);}
</span><span class="line">img3{width:100px;border-color:blue;transform:scale(1.2,0.8);}
</span><span class="line">img4{width:100px;border-color:rebeccapurple;transform:skew(20deg,30deg);}</span></code></pre></td></tr></table></div></figure>
<div style="display:flex;justify-content: space-around;padding-bottom:30px;">
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:red;" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:yellow;transform:rotate(20deg);" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:green;transform:translate(20px, 20px);" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:blue;transform:scale(1.2,0.8)" />
    <img src="http://niuniuzh.github.io/images/github.png" style="width:100px;height:100px;border-color:rebeccapurple;transform:skew(20deg,30deg)" />
</div>

<!-- more -->

<p>第一个图片没有任何改变，原本的样式。第二个图片加上一个rotate旋转，从原点(由 transform-origin 属性指定)开始安装顺时针方向旋转元素一个特定的角度。
第三个图片加上一个translate平移，在x方向和y方向移动指定的距离。第四个图片加上一个缩放scale,在x方向和y方向放大缩小指定倍数。第四个图片加上一个skew
倾斜，与x轴或者y轴转动设置的角度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu搭建ionic环境]]></title>
    <link href="http://niuniuzh.github.io/blog/2017/12/12/ubuntuda-jian-ionichuan-jing/"/>
    <updated>2017-12-12T21:50:53+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2017/12/12/ubuntuda-jian-ionichuan-jing</id>
    <content type="html"><![CDATA[<hr />

<p>首先需要安装node,但是我们要先安装一个nvm,一个管理node版本的神器.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.7/install.sh | bash
</span><span class="line">sudo gvim .bashrc
</span><span class="line">cp --&gt;
</span><span class="line">export NVM_DIR="$HOME/.nvm"
</span><span class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" # This loads nvm
</span><span class="line">:wq
</span><span class="line">source .bashrc</span></code></pre></td></tr></table></div></figure>

<!-- more -->
<p>安装好了,执行一下nvm –version,输出版本号就算成功了.下一步，我们来安装并使用node.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nvm install node
</span><span class="line">nvm use node
</span><span class="line">nvm ls  --显示安装的版本
</span><span class="line">nvm ls-remote  --显示可以安装的版本
</span><span class="line">nvm alias default node  --设置默认node</span></code></pre></td></tr></table></div></figure>
<p>更多参考<a href="https://github.com/creationix/nvm" title="github/nvm">github</a></p>

<p>接下来我们就可以使用npm,安装ionic,cordova啦.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">npm install -g cordova ionic</span></code></pre></td></tr></table></div></figure>
<p>安装的过程有点漫长,好在还可以安装成功.</p>

<p>创建一个APP,使用命令,ionic会自动生成一个项目</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ionic start myApp tabs/blank/sidemenu</span></code></pre></td></tr></table></div></figure>

<p>然后切换到项目目录,开启服务.在浏览器就可以看到了.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd myApp
</span><span class="line">ionic serve</span></code></pre></td></tr></table></div></figure>
<p>更多ionic可以参考<a href="https://ionicframework.com/getting-started/" title="ionic doc">ionic</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建git服务器]]></title>
    <link href="http://niuniuzh.github.io/blog/2017/11/18/da-jian-gitfu-wu-qi/"/>
    <updated>2017-11-18T12:01:08+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2017/11/18/da-jian-gitfu-wu-qi</id>
    <content type="html"><![CDATA[<h2 id="ubuntugit">在ubuntu上搭建git服务器</h2>
<p>1.安装git和ssh.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt install git
</span><span class="line">sudo apt install openssh-server openssh-client</span></code></pre></td></tr></table></div></figure>

<p>2.创建一个git用户，用来管理git服务器,设置密码.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo adduser git</span></code></pre></td></tr></table></div></figure>
<p>在/home目录下会生成一个git文件夹.
<!--more--></p>

<p>3.创建ssh证书认证文件,临时修改authorized_keys文件的权限,并把需要访问git服务器的客户端公钥id_rsa.pub的内容复制到authorized_keys文件</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo mkdir /home/git/.ssh
</span><span class="line">sudo touch /home/git/.ssh/authorized_keys
</span><span class="line">sudo chmod 777 /home/git/.ssh/authorized_keys
</span><span class="line">cat xxx &gt;&gt; authorized_keys</span></code></pre></td></tr></table></div></figure>

<p>4.如何生成ssh-keys</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh-keygen -t rsa -C "email address"</span></code></pre></td></tr></table></div></figure>

<p>5.修改authorized_keys文件的权限,修改所属git</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo chmod 700 /home/git
</span><span class="line">sudo chmod 700 /home/git/.ssh
</span><span class="line">sudo chmod 600 /home/git/authorized_keys
</span><span class="line">sudo chown -R git:git /home/git
</span><span class="line">sudo chown -R git:git /home/git/.ssh
</span><span class="line">sudo chown -R git:git /home/git/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>

<p>6.禁用shell登录.出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash
</span><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span></code></pre></td></tr></table></div></figure>

<p>7.初始化Git仓库</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo mkdir /home/xxxx
</span><span class="line">sudo git init --bare test.git
</span><span class="line">sudo chown -R git:git /home/xxxx/test.git</span></code></pre></td></tr></table></div></figure>

<p>8.通过git clone命令克隆远程仓库了，在各自的电脑上运行</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@192.168.1.100:/home/xxxx/test.git</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Github]]></title>
    <link href="http://niuniuzh.github.io/blog/2017/08/29/learn-github/"/>
    <updated>2017-08-29T20:02:01+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2017/08/29/learn-github</id>
    <content type="html"><![CDATA[<h2 id="ubuntugit">在ubuntu上安装git</h2>
<p>1.打开终端输入</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt install git
</span><span class="line">git</span></code></pre></td></tr></table></div></figure>
<p>如果是在windows上安装，使用<a href="https://git-for-windows.github.io" title="msysgit">msysgit</a></p>

<!-- more -->
<p>2.配置用户信息</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git config --global user.name 'Your name'
</span><span class="line">git config --global user.email 'email@gmail.com'
</span><span class="line">git config --global core.editor emacs || gvim</span></code></pre></td></tr></table></div></figure>

<p>3.检查配置信息</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git config --list
</span><span class="line">git config &lt;key&gt;</span></code></pre></td></tr></table></div></figure>

<p>4.使用帮助</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git help &lt;verb&gt;
</span><span class="line">git &lt;verb&gt; --help
</span><span class="line">man git-&lt;verb&gt;
</span><span class="line">git help config</span></code></pre></td></tr></table></div></figure>

<p>5.初始化仓库</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir test &amp;&amp; cd test
</span><span class="line">git init
</span><span class="line">git clone &lt;url&gt; ~/test</span></code></pre></td></tr></table></div></figure>

<p>6.修改和提交</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git status
</span><span class="line">git diff
</span><span class="line">git add -A -v
</span><span class="line">git add .
</span><span class="line">git add &lt;file&gt;
</span><span class="line">git mv &lt;old&gt; &lt;new&gt;
</span><span class="line">git rm &lt;file&gt;
</span><span class="line">git rm --cached &lt;file&gt;
</span><span class="line">git commit -m "message"
</span><span class="line">git commit --amend</span></code></pre></td></tr></table></div></figure>

<p>7.忽略文件</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">.gitignore规则
</span><span class="line">空行#开头会被忽略
</span><span class="line">glob正则匹配
</span><span class="line">[abc],*,?[0-9],a/**/z
</span><span class="line">!取反
</span><span class="line">
</span><span class="line">*.a
</span><span class="line">!lib.a
</span><span class="line">/TODO
</span><span class="line">build/
</span><span class="line">doc/*.*
</span><span class="line">doc/**/.*</span></code></pre></td></tr></table></div></figure>

<p>8.查看历史</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git log
</span><span class="line">git log -p -n
</span><span class="line">git log --stat
</span><span class="line">git log --pretty=oneline
</span><span class="line">git log --pretty=format:""
</span><span class="line">git log --graph</span></code></pre></td></tr></table></div></figure>

<p>9.GIT撤销操作</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git commit --amend
</span><span class="line">git reset HEAD &lt;file&gt;
</span><span class="line">git checkout --&lt;file&gt;</span></code></pre></td></tr></table></div></figure>

<p>10.ssh-key</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh-keygen -t rsa -C "youremail@example.com"
</span><span class="line">git remote -v    查看远程仓库
</span><span class="line">git remote add something git@github.com:xxxx/xxxx
</span><span class="line">git push -u origin master
</span><span class="line">git remote show origin
</span><span class="line">git remote rename xx  yy
</span><span class="line">git remote rm xx</span></code></pre></td></tr></table></div></figure>

<p>11.添加tag</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git tag    --列出所有tag
</span><span class="line">git tag -a v1.1 hashkey
</span><span class="line">git show v1.1    --显示v1.1
</span><span class="line">git push origin tagname
</span><span class="line">git push origin --tags
</span><span class="line">git tag -d v1.1    --删除tag
</span><span class="line">git push origin --delete tag v1.1
</span><span class="line">git push origin :refs/tags/v1.1
</span><span class="line">git checkout -b [branchname] [tagname]    --检出</span></code></pre></td></tr></table></div></figure>

<p>12.alias配置别名</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git config --global alias.st status
</span><span class="line">git config --global alias.co checkout
</span><span class="line">git config --global alias.cm commit
</span><span class="line">git config --global alias.br branch
</span><span class="line">git config --global alias.unstage 'reset HEAD'
</span><span class="line">git config --global alias.last 'log -1'
</span><span class="line">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></code></pre></td></tr></table></div></figure>

<p>13.创建合并分支</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git branch haha    --创建分支haha
</span><span class="line">git checkout haha    --切换分支haha
</span><span class="line">git checkout -b haha    --创建并切换分支haha
</span><span class="line">git merge haha    --合并分支haha
</span><span class="line">git branch -d haha    --删除分支haha
</span><span class="line">git mergetool    --解决冲突
</span><span class="line">git push (remote) (branch)
</span><span class="line">git push origin --delete haha
</span><span class="line">git rebase [basebranch] [topicbranch]</span></code></pre></td></tr></table></div></figure>

<p>14.其他git命令</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git stash    --储藏
</span><span class="line">git stash pop
</span><span class="line">git stash apply
</span><span class="line">git commit --amend    --修改最后一次提交
</span><span class="line">git rebase -i HEAD~3    --最近n次提交</span></code></pre></td></tr></table></div></figure>

<p><a href="https://git-scm.com/book/zh/v2/" title="gitbook">gitbook</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ubuntu上安装mysql]]></title>
    <link href="http://niuniuzh.github.io/blog/2017/07/05/20170705/"/>
    <updated>2017-07-05T12:41:00+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2017/07/05/20170705</id>
    <content type="html"><![CDATA[<h2 id="ubuntu-mysql">ubuntu 安装mysql</h2>
<p>1.打开终端输入</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt install mysql-server mysql-client</span></code></pre></td></tr></table></div></figure>
<p>然后设置root密码。</p>

<p>2.登录mysal</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mysql -u root -p</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ubuntu上安装shadowsocks]]></title>
    <link href="http://niuniuzh.github.io/blog/2017/05/20/shadowsocks/"/>
    <updated>2017-05-20T12:15:42+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2017/05/20/shadowsocks</id>
    <content type="html"><![CDATA[<h2 id="ubuntushadowsocks">ubuntu安装shadowsocks</h2>
<p>1.通过PPA源安装，设置PPA源</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5
</span><span class="line">sudo apt update
</span><span class="line">sudo apt install shadowsocks-qt5</span></code></pre></td></tr></table></div></figure>

<p>shadowsocks配置</p>

<p>1.打开界面，依次填入server address,server port,password,等等。。。</p>

<p>2连接，把程序启动自动连接勾上，每次启动就会自动连接了</p>

<p>配置全局代理</p>

<p>1.安装GenPAC</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo pip install genpac
</span><span class="line">sudo pip install --upgrade genpac</span></code></pre></td></tr></table></div></figure>
<!-- more -->
<p>2.下载gfwlist</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">genpac -p "SOCKS5 127.0.0.1:1080" --gfwlist-proxy="SOCKS5 127.0.0.1:1080" --output="autoproxy.pac" --gfwlist-url</span></code></pre></td></tr></table></div></figure>
<p>3.设置代理</p>

<p>点击网络，选择代理，method为automatic,然后设置文件路径
file:///home/missnote/vpnPAC/autoproxy.pac,大工告成.</p>

<p>安装proxychains</p>

<p>1.安装</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt install proxychains</span></code></pre></td></tr></table></div></figure>
<p>2.编辑配置</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gvim /etc/proxychains.conf
</span><span class="line">socks4 127.0.0.1 9095 ---&gt; socks5 127.0.0.1 1080</span></code></pre></td></tr></table></div></figure>
<p>3.使用方法</p>

<p>需要代理的前面加上proxychains</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo proxychains you-get
</span><span class="line">proxychains pip install</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步OCTOPRESS到新电脑上]]></title>
    <link href="http://niuniuzh.github.io/blog/2017/03/31/hahaha/"/>
    <updated>2017-03-31T22:49:36+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2017/03/31/hahaha</id>
    <content type="html"><![CDATA[<hr />

<p>很早之前，在WINDOWS上搭建好了OCTOPRESS博客，懒死了，没有写一些什么东西，换一台新电脑，装了UBUNTU系统，想要同步一下之前的博客，
以做备忘。</p>

<p>首先，从GITHUB上面CLONE原来blog的SOURCE分支：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone -b source git@github.com:niuniuzh/niuniuzh.github.io octopress</span></code></pre></td></tr></table></div></figure>

<p>然后，切换到OCTOPRESS目录，CLONE主分支：</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:niuniuzh/niuniuzh.github.io _deploy</span></code></pre></td></tr></table></div></figure>

<!-- more -->
<p>Octopress</p>

<p>安装一些配置文件</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install bundler
</span><span class="line">bundle install
</span><span class="line">rake setup_github_pages</span></code></pre></td></tr></table></div></figure>

<p>设置你的GITHUB仓库</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Enter the read/write url for your repository
</span><span class="line">git@github.com:niuniuzh/niuniuzh.github.io</span></code></pre></td></tr></table></div></figure>

<p>然后使用命令在本地预览一下</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake preview</span></code></pre></td></tr></table></div></figure>

<p>发布新的文章</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake new_post['title']
</span><span class="line">rake generate
</span><span class="line">rake preview</span></code></pre></td></tr></table></div></figure>

<p>推送到GITHUB上面</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git add .
</span><span class="line">git commit -m"some details"
</span><span class="line">git push origin source
</span><span class="line">rake deploy</span></code></pre></td></tr></table></div></figure>

<p>在新的电脑上同步文件</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd octopress
</span><span class="line">git pull origin source
</span><span class="line">cd _deploy
</span><span class="line">git pull origin master</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Is a Test]]></title>
    <link href="http://niuniuzh.github.io/blog/2016/09/10/this-is-a-test/"/>
    <updated>2016-09-10T19:56:38+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2016/09/10/this-is-a-test</id>
    <content type="html"><![CDATA[<p>这是一个测试，
刷新千牛，优化标题，排名，等等；</p>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">   <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">   <span class="kt">int</span> <span class="n">b</span>
</span><span class="line">   <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows下搭建OctoPress]]></title>
    <link href="http://niuniuzh.github.io/blog/2016/08/16/octopress/"/>
    <updated>2016-08-16T22:34:26+08:00</updated>
    <id>http://niuniuzh.github.io/blog/2016/08/16/octopress</id>
    <content type="html"><![CDATA[<hr />

<p>很早就想要搭建一个博客，懒死了。记录一下搭建过程，以作备忘。</p>

<p>Github</p>

<p>申请一个github账号，创建一个仓库，方便代码托管。仓库格式： yourusername.github.io</p>

<p>Ruby</p>

<p>默认安装，添加环境变量，查看Ruby版本。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ruby --version</span></code></pre></td></tr></table></div></figure>
<p>DevKit</p>

<p>下载解压到某个目录，shift右键在此处打开命令窗口，执行如下口令。</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd DevKit
</span><span class="line">ruby dk.rb init 
</span><span class="line">ruby dk.rb install</span></code></pre></td></tr></table></div></figure>
<!-- more -->
<p>Octopress</p>

<p>在安装Octopress之前，确保安装了git，使用下面命令下载Octopress。</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line">cd octopress
</span><span class="line">gem install bundler
</span><span class="line">bundle install
</span><span class="line">rake install</span></code></pre></td></tr></table></div></figure>
<p>安装Octopress主题</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake install</span></code></pre></td></tr></table></div></figure>
<p>编写文章</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake new_post['title'] </span></code></pre></td></tr></table></div></figure>
<p>生成一个markdown文件，使用markdown编辑完成之后，执行</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake generate
</span><span class="line">rake preview</span></code></pre></td></tr></table></div></figure>
<p>然后打开http://127.0.0.1:4000/ 看看效果,没有问题就可以发布了。</p>

<p>部署到github上，运行</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake setup_github_pages</span></code></pre></td></tr></table></div></figure>
<p>此时会要求输入仓库的url，git@github.com:yourusername/yourusername.github.io，设置成功之后，将本地代码同步到github上面</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake deploy 
</span><span class="line">git add .
</span><span class="line">git commit -m "comment"
</span><span class="line">git push origin source</span></code></pre></td></tr></table></div></figure>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align} %]]&gt;</script>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*} %]]&gt;</script>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>AT&amp;T</p>
]]></content>
  </entry>
  
</feed>
